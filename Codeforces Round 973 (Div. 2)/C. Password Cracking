import java.util.*;
public class Main{
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            String s = "0";  //let s lie somewhere in middle of our answer string
            if (!getResponse(s, sc)) {
                s = "1"; 
            }
            //try checking by moving right => completing suffix part
            while (s.length() < n) {
                if (getResponse(s + "0", sc)) s += "0";  //make a request to know suffx is 0 or not
                else if (getResponse(s + "1", sc)) s += "1";  //make a request to know suffx is 1 or not
                else break;   //that means we have reached the end on right since neither 0 or 1 works => no need to make a request
            }
            //try checking by moving left => completing prefix part
            while (s.length() < n) {
                if (getResponse("0" + s, sc)) s = "0" + s;  //make a request to know prefix is 0 or not
                else s = "1" + s;    //no need to make a request since if not 0 then 1 is the only possibility -> save on requests
            }
            System.out.println("! " + s);
            System.out.flush();
        }

        sc.close();
    }

    public static boolean getResponse(String s, Scanner scanner) {
        System.out.println("? " + s);
        int response = scanner.nextInt();
        return response == 1 ? true : false;
    }
}
  
/*
LOGIC---
Objective--- Need to predict the string the person has using 2n queries.
where n is also the length of string.

We send a string and ask the server whether the string we sent is a substring of s or not.
If yes then we get 1 otherwise 0.

Approach---
First check if 0 is a substring of string.
if not then s has 1.

Same way we keep on checking for 00, if not 01, 000, if not 001 and so on moving right wards.
Again we do the same checks for 00, if not 10, 000, if not 100 and so on movign leftwards.

*/