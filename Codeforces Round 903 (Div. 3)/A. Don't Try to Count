import java.util.*;
public class Main{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int T=sc.nextInt();
        while(T-->0){
            int n=sc.nextInt(); //length of s
            int m=sc.nextInt(); //length of t
            String s = sc.next();
            String t = sc.next();
            StringBuilder sb = new StringBuilder(s);
            //StringBuilder tb = new StringBuilder(t);
            int count=0;
            int found=0;
            while(sb.length()<150 && found==0){
                if(sb.indexOf(t)==-1){
                    count++;
                    sb.append(sb);
                }
                else found=1;
            }
            if(found==1) System.out.println(count);
            else System.out.println(-1);
        }
    }
}


LOGIC---
By observation the constraints for length of s and t are very small.
So, we apply brute force and form new s each time and check whether t exist in it as a substring or not.
You can try with differnet cosntraints like performing the operation at max 10 times or taking s to a length of 150.
Somethign like that, just don't take too big a condtion otherwie it might give you memory limit exceeded error.



/* MEMORY LIMIT EXCEEDED ERROR */
import java.util.*;
public class Main{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int T=sc.nextInt();
        while(T-->0){
            int n=sc.nextInt(); //length of s
            int m=sc.nextInt(); //length of t
            String s = sc.next();
            String t = sc.next();
            StringBuilder sb = new StringBuilder(s);
            //StringBuilder tb = new StringBuilder(t);
            int count=0;
            int found=0;
            while(count<25 && found==0){
                if(sb.indexOf(t)==-1) count++;
                else{
                    found=1;
                }
                sb.append(sb);
            }
            if(found==1) System.out.println(count);
            else System.out.println(-1);
        }
    }
}
