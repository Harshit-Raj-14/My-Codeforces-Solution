import java.util.*;
public class main{
    public static void solve(int n, int b[]){
        int a[] = new int[n];
        a[0]=b[0];
        int possible=1;
        for(int i=1;i<n-1;i++){
            a[i]=b[i-1] | b[i];
        }
        a[n-1] = b[n-2];
        for(int i=0;i<n-1;i++){
            if(b[i]!=(a[i]&a[i+1])){possible=-1; break;}
        }
        if(possible==-1) System.out.println(-1);
        else{
            for(int i=0;i<a.length;i++){
                System.out.print(a[i]+" ");
            }
            System.out.println();
        }
    }

    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int t=  sc.nextInt();
        while(t-->0){
            int n = sc.nextInt();
            int b[] = new int[n-1];
            for(int i=0;i<n-1;i++){
                b[i]=sc.nextInt();
            }
            solve(n, b);
        }
    }
}

/*
ALGORITHM--- 
Bitwise OR Operation: 
By setting a[i] = b[i-1] | b[i], the solution ensures that a[i] has all the bits set that are set in either b[i-1] or b[i]. 
This maximizes the possibility that a[i] & a[i+1] will yield b[i] because bitwise OR will have bits set that are needed to match the bits set in b[i].

Initial and Final Elements: 
The solution sets a[0] = b[0] and a[n-1] = b[n-2]. 
This choice ensures that the boundary conditions are satisfied, 
giving the correct value for b[0] and b[n-2].

Checking for Validity: 
The solution currently doesn't explicitly check if b[i]=a[i]&a[i+1]b[i]=a[i]&a[i+1] after constructing a, 
but it works under the assumption that the OR operation will cover all necessary bits. 
This assumption is usually valid but lacks explicit validation for every test case.
*/