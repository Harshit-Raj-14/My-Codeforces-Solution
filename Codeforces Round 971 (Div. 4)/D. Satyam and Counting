import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();     
        while (t-- > 0) {
            int n = sc.nextInt();
            int[] freq0 = new int[n + 1];   //store freq of x cordintate where y is 0
            int[] freq1 = new int[n + 1];    //store freq of x cordintate where y is 1
            int yZeroCount = 0;
            int yOneCount = 0;
            for (int i = 0; i < n; i++) {
                int x = sc.nextInt();
                int y = sc.nextInt();
                if (y == 0) {
                    yZeroCount++;
                    freq0[x]++;
                } else {
                    yOneCount++;
                    freq1[x]++;
                }
            }
            long ans = 0;
            for (int i = 0; i <= n; i++) {
                // Calculating for y == 0
                if (freq0[i] == 1 && freq1[i] == 1){    //a straight line will be formed from (x1,0) to (x1,1) which is right angle triangle with every other point, except itself
                    ans += (yZeroCount - 1);
                    ans += (yOneCount - 1);
                }
                if (freq0[i] == 1){     //90,45,45 triangle eg: (1,0),(2,1),(3,0) => will contribute one triangle
                    int left = i - 1;
                    int right = i + 1;
                    if (left >= 0 && right <= n && freq1[left] > 0 && freq1[right] > 0) {
                        ans++;
                    }
                }
                if (freq1[i] == 1){ //same case as above
                    int left = i - 1;
                    int right = i + 1;
                    if (left >= 0 && right <= n && freq0[left] > 0 && freq0[right] > 0) {
                        ans++;
                    }
                }
            }
            System.out.println(ans);
        }
        sc.close();
    }
}

/*
LOGIC---

 */

/* BRUTE FORCE TLE */
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int mat[][] = new int[n][2];
            int count = 0;
            for (int i = 0; i < n; i++) {
                mat[i][0] = sc.nextInt();
                mat[i][1] = sc.nextInt();
            }
            // Check every combination of three points to see if they form a right-angle triangle
            for (int i = 0; i < n; i++) {
                for (int j = i + 1; j < n; j++) {
                    for (int k = j + 1; k < n; k++) {
                        if (isRightAngle(mat[i], mat[j], mat[k])) {
                            count++;
                        }
                    }
                }
            }

            System.out.println(count);
        }
        sc.close();
    }

    // Method to check if the given three points form a right-angle triangle
    public static boolean isRightAngle(int[] p1, int[] p2, int[] p3) {
        int a2 = distanceSquared(p1, p2);
        int b2 = distanceSquared(p2, p3);
        int c2 = distanceSquared(p1, p3);
        // Check the three possible orderings of the triangle's sides
        return (a2 + b2 == c2) || (a2 + c2 == b2) || (b2 + c2 == a2);
    }

    // Helper method to calculate squared distance between two points
    public static int distanceSquared(int[] p1, int[] p2) {
        int dx = p1[0] - p2[0];
        int dy = p1[1] - p2[1];
        return dx * dx + dy * dy;
    }
}
